version: "3.1"

services:
  datawarehouse-service:
    image: ilietodirascu/datawarehouse:latest
    # image: datawarehouse-service
    container_name: datawarehouse
    hostname: datawarehouse-service
    depends_on:
      - user-database
      - chat-gpt-database
      - mongo
    ports:
      - 27018:80
    networks:
      - mynetwork
  mongo:
    image: mongo
    hostname: my-mongo
    restart: always
    ports:
      - 27017:27017
    networks:
      - mynetwork
  rabbit:
    image: rabbitmq:3-management
    container_name: bunny
    environment:
      - RABBITMQ_ERLANG_COOKIE=my_long_and_cool_cookie_which_is_also_tasty
    hostname: my-rabbit
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - mynetwork

  notification-server:
    image: ilietodirascu/notification-server:latest
    # image: notification-server
    hostname: notification-server-container
    ports:
      - "5297:80"
      - "7082:443"
    networks:
      - mynetwork
    container_name: notification-server-container
  log-consumer:
    image: ilietodirascu/log-consumer:latest
    ports:
      - "5216:80"
      - "7192:443"
    networks:
      - mynetwork

  chat-gpt-database:
    container_name: chat-gpt-database
    image: postgres:latest
    hostname: chat-gpt-database
    restart: always
    ports:
      - 5433:5432
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: chat-gpt-db
    networks:
      - mynetwork
  
  chat-gpt-database1:
    container_name: chat-gpt-database1
    image: postgres:latest
    hostname: chat-gpt-database1
    restart: always
    ports:
      - 5439:5432
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: chat-gpt-db1
    networks:
      - mynetwork

  chat-gpt-database2:
    container_name: chat-gpt-database2
    image: postgres:latest
    hostname: chat-gpt-database2
    restart: always
    ports:
      - 5440:5432
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: chat-gpt-db2
    networks:
      - mynetwork

  chat-gpt-database3:
    container_name: chat-gpt-database3
    image: postgres:latest
    hostname: chat-gpt-database3
    restart: always
    ports:
      - 5441:5432
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: chat-gpt-db3
    networks:
      - mynetwork

  chat-gpt-database4:
    container_name: chat-gpt-database4
    image: postgres:latest
    hostname: chat-gpt-database4
    restart: always
    
    ports:
      - 5442:5432
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: chat-gpt-db4
    networks:
      - mynetwork
  
  datawarehouse-database:
    container_name: datawarehouse-database
    image: postgres:latest
    hostname: datawarehouse-database
    restart: always
    
    ports:
      - 5435:5432
    environment:
      POSTGRES_PASSWORD: password
    networks:
      - mynetwork

  user-database:
    container_name: user-database
    image: postgres:latest
    hostname: user-database
    restart: always
    ports:
      - 5434:5432
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user-db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - mynetwork

  user-database1:
    container_name: user-database1
    image: postgres:latest
    hostname: user-database1
    restart: always
    ports:
      - 5443:5432
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user-db1
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - mynetwork
  
  user-database2:
    container_name: user-database2
    image: postgres:latest
    hostname: user-database2
    restart: always
    ports:
      - 5436:5432
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user-db2
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - mynetwork

  user-database3:
    container_name: user-database3
    image: postgres:latest
    hostname: user-database3
    restart: always
    ports:
      - 5437:5432
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user-db3
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - mynetwork

  user-database4:
    container_name: user-database4
    image: postgres:latest
    hostname: user-database4
    restart: always
    ports:
      - 5438:5432
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user-db4
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - mynetwork
  
  user_service:
    container_name: user_service
    # image: aftenidaniela/user_service:latest
    hostname: user_service
    build:
      context: ./user_service
    # environment:
    #   - SERVICE_NAME=node1
    #   - SERVICE_PORT=4000
    environment:
      - SERVICE_NAME=node1
      - SERVICE_PORT=4000
      - DB_USER_MASTER=postgres
      - DB_PASSWORD_MASTER=password
      - DB_HOST_MASTER=user-database
      - DB_NAME_MASTER=user-db
      - DB_USER_REPLICA_1=postgres
      - DB_PASSWORD_REPLICA_1=password
      - DB_HOST_REPLICA_1=user-database1
      - DB_NAME_REPLICA_1=user-db1
      - DB_USER_REPLICA_2=postgres
      - DB_PASSWORD_REPLICA_2=password
      - DB_HOST_REPLICA_2=user-database2
      - DB_NAME_REPLICA_2=user-db2
      - DB_USER_REPLICA_3=postgres
      - DB_PASSWORD_REPLICA_3=password
      - DB_HOST_REPLICA_3=user-database3
      - DB_NAME_REPLICA_3=user-db3
      - DB_USER_REPLICA_4=postgres
      - DB_PASSWORD_REPLICA_4=password
      - DB_HOST_REPLICA_4=user-database4
      - DB_NAME_REPLICA_4=user-db4
    ports:
      - "6000:6000"
    depends_on:
      - user-database
      - user-database1
      - user-database2
      - user-database3
      - user-database4
    restart: always
    networks:
      - mynetwork

  coordinator_service:
    container_name: coordinator_service
    # image: aftenidaniela/coordinator_service:latest
    hostname: coordinator_service
    build:
      context: ./coordinator_service
    environment:
      - SERVICE_NAME=node1
      - SERVICE_PORT=4000
    ports:
      - "6001:6001"
    restart: always
    networks:
      - mynetwork
  consistent_hashing_service:
    container_name: consistent_hashing_service
    build:
      context: ./consistent_hashing_service
    environment:
        - SERVICE_COUNT=3  # Number of cache services
        - SERVICE_NAME_1=cache_service1
        - SERVICE_PORT_1=4000
        - SERVICE_NAME_2=cache_service2
        - SERVICE_PORT_2=4001
        - SERVICE_NAME_3=cache_service3
        - SERVICE_PORT_3=4002
    ports:
      - "9000:9000"
    restart: always
    networks:
      - mynetwork

  cache_service1:
    container_name: cache_service1
    # image: aftenidaniela/cache_service:latest
    # hostname: cache_service
    build:
      context: ./cache_service
    environment:
      - SERVICE_NAME=node1
      - SERVICE_PORT=4000
    ports:
      - "4000:4000"
    networks:
      - mynetwork

  cache_service2:
    container_name: cache_service2
    # image: aftenidaniela/cache_service:latest
    # hostname: cache_service2
    build:
      context: ./cache_service
    environment:
      - SERVICE_NAME=node2
      - SERVICE_PORT=4001
    ports:
      - "4001:4000"
    restart: always
    networks:
      - mynetwork

  cache_service3:
    container_name: cache_service3
    # hostname: cache_service3
    # image: aftenidaniela/cache_service:latest
    build:
      context: ./cache_service
    environment:
      - SERVICE_NAME=node3
      - SERVICE_PORT=4002
    ports:
      - "4002:4000"
    networks:
      - mynetwork
  dotnet_gateway:
    container_name: dotnet_gateway
    image: ilietodirascu/dotnet-gateway
    ports:
      - 8080:8080
    restart: always
    environment:
      - DOCKER_HOST=tcp://0.0.0.0:2375
    networks:
      - mynetwork

  prometheus:
    container_name: prometheus
    hostname: prometheus
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    networks:
      - mynetwork
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./grafana:/var/lib/grafana
    networks:
      - mynetwork
networks:
  mynetwork:
volumes:
  grafana_data: