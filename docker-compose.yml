version: "3.1"

services:
  mongo:
    image: mongo
    hostname: my-mongo
    restart: always
    ports:
      - 27017:27017
    networks:
      - mynetwork
  rabbit:
    image: rabbitmq:3-management
    container_name: bunny
    hostname: my-rabbit
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - mynetwork
  notification-server:
    image: ilietodirascu/notification-server:latest
    # image: notification-server
    hostname: notification-server-container
    ports:
      - "5297:80"
      - "7082:443"
    networks:
      - mynetwork
    container_name: notification-server-container
  log-consumer:
    image: ilietodirascu/log-consumer:latest
    ports:
      - "5216:80"
      - "7192:443"
    networks:
      - mynetwork

  # neo4j-database:
  #   container_name: neo4j-database
  #   image: neo4j:latest
  #   hostname: neo4j-database
  #   restart: always
  #   ports:
  #     - 7687:7687
  #   environment:
  #     NEO4J_AUTH: neo4j/password
  #   networks:
  #     - mynetwork

  chat-gpt-database:
    container_name: chat-gpt-database
    image: postgres:latest
    hostname: chat-gpt-database
    restart: always
    ports:
      - 5433:5432
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: chat-gpt-db
    networks:
      - mynetwork

  user-database:
    container_name: user-database
    image: postgres:latest
    hostname: user-database
    restart: always
    ports:
      - 5434:5432
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user-db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - mynetwork

  # postgres-database2:
  #   container_name: postgres-database2
  #   image: postgres:latest
  #   hostname: postgres-database2
  #   restart: always
  #   ports:
  #     - 5435:5432
  #   environment:
  #     POSTGRES_PASSWORD: password
  #     POSTGRES_DB: postgres-db2
  #   healthcheck:
  #     test: [ "CMD-SHELL", "pg_isready -U postgres" ]
  #     interval: 15s
  #     timeout: 10s
  #     retries: 5
  #   networks:
  #     - mynetwork
  
  # postgres-database3:
  #   container_name: postgres-database3
  #   image: postgres:latest
  #   hostname: postgres-database3
  #   restart: always
  #   ports:
  #     - 5436:5432
  #   environment:
  #     POSTGRES_PASSWORD: password
  #     POSTGRES_DB: postgres-db3
  #   healthcheck:
  #     test: [ "CMD-SHELL", "pg_isready -U postgres" ]
  #     interval: 15s
  #     timeout: 10s
  #     retries: 5
  #   networks:
  #     - mynetwork

  # postgres-database4:
  #   container_name: postgres-database4
  #   image: postgres:latest
  #   hostname: postgres-database4
  #   restart: always
  #   ports:
  #     - 5437:5432
  #   environment:
  #     POSTGRES_PASSWORD: password
  #     POSTGRES_DB: postgres-db4
  #   healthcheck:
  #     test: [ "CMD-SHELL", "pg_isready -U postgres" ]
  #     interval: 15s
  #     timeout: 10s
  #     retries: 5
  #   networks:
  #     - mynetwork

  # postgres-database5:
  #   container_name: postgres-database5
  #   image: postgres:latest
  #   hostname: postgres-database5
  #   restart: always
  #   ports:
  #     - 5438:5432
  #   environment:
  #     POSTGRES_PASSWORD: password
  #     POSTGRES_DB: postgres-db5
  #   healthcheck:
  #     test: [ "CMD-SHELL", "pg_isready -U postgres" ]
  #     interval: 15s
  #     timeout: 10s
  #     retries: 5
  #   networks:
  #     - mynetwork
  
  user_service:
    container_name: user_service
    # image: aftenidaniela/user_service:latest
    hostname: user_service
    build:
      context: ./user_service
    environment:
      - SERVICE_NAME=node1
      - SERVICE_PORT=4000
    ports:
      - "6000:6000"
    depends_on:
      - user-database
    restart: always
    networks:
      - mynetwork

  coordinator_service:
    container_name: coordinator_service
    # image: aftenidaniela/coordinator_service:latest
    hostname: coordinator_service
    build:
      context: ./coordinator_service
    environment:
      - SERVICE_NAME=node1
      - SERVICE_PORT=4000
    ports:
      - "6001:6001"
    restart: always
    networks:
      - mynetwork

  # cache_service:
  #   container_name: cache_service
  #   # image: aftenidaniela/cache_service:latest
  #   build:
  #     context: ./cache_service
  #   ports:
  #     - "4000:4000"
  #   depends_on:
  #     - neo4j-database
  #   restart: always
  #   networks:
  #     - mynetwork

  consistent_hashing_service:
    container_name: consistent_hashing_service
    build:
      context: ./consistent_hashing_service
    environment:
        - SERVICE_COUNT=3  # Number of cache services
        - SERVICE_NAME_1=cache_service1
        - SERVICE_PORT_1=4000
        - SERVICE_NAME_2=cache_service2
        - SERVICE_PORT_2=4001
        - SERVICE_NAME_3=cache_service3
        - SERVICE_PORT_3=4002
    ports:
      - "9000:9000"
    restart: always
    networks:
      - mynetwork

  cache_service1:
    container_name: cache_service1
    # image: aftenidaniela/cache_service:latest
    # hostname: cache_service
    build:
      context: ./cache_service
    environment:
      - SERVICE_NAME=node1
      - SERVICE_PORT=4000
    ports:
      - "4000:4000"
    restart: always
    networks:
      - mynetwork

  cache_service2:
    container_name: cache_service2
    # image: aftenidaniela/cache_service:latest
    # hostname: cache_service2
    build:
      context: ./cache_service
    environment:
      - SERVICE_NAME=node2
      - SERVICE_PORT=4001
    ports:
      - "4001:4000"
    restart: always
    networks:
      - mynetwork

  cache_service3:
    container_name: cache_service3
    # hostname: cache_service3
    # image: aftenidaniela/cache_service:latest
    build:
      context: ./cache_service
    environment:
      - SERVICE_NAME=node3
      - SERVICE_PORT=4002
    ports:
      - "4002:4000"
    restart: always
    networks:
      - mynetwork


  chat_gpt_service:
    container_name: chat_gpt_service
    # image: aftenidaniela/chat_gpt_service:latest
    hostname: gpt1
    build:
      context: ./chat_gpt_service
    environment:
      - PROMETHEUS_PORT=4401
    ports:
      - "5000:5000"
      # - "4401:4401"
    depends_on:
      - chat-gpt-database
    restart: always
    networks:
      - mynetwork
  chat_gpt_service2:
    container_name: chat_gpt_service2
    hostname: gpt2
    # image: aftenidaniela/chat_gpt_service:latest
    build:
      context: ./chat_gpt_service
    environment:
      - PROMETHEUS_PORT=4402
    ports:
      - "5001:5000"
      # - "4402:4402"
    depends_on:
      - chat-gpt-database
    restart: always
    networks:
      - mynetwork
  chat_gpt_service3:
    hostname: gpt3
    container_name: chat_gpt_service3
    # image: aftenidaniela/chat_gpt_service:latest
    build:
      context: ./chat_gpt_service
    environment:
      - PROMETHEUS_PORT=4403
    ports:
      - "5002:5000"
      # - "4403:4403"
    depends_on:
      - chat-gpt-database
    restart: always
    networks:
      - mynetwork
  gateway:
    container_name: gateway
    image: ilietodirascu/gateway:latest
    ports:
      - "8080:8080"
    restart: always
    networks:
      - mynetwork
  prometheus:
    container_name: prometheus
    hostname: prometheus
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    networks:
      - mynetwork
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - mynetwork
networks:
  mynetwork:
volumes:
  grafana_data: